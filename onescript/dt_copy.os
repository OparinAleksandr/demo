#Использовать irac
#Использовать cmdline
#Использовать v8runner
#Использовать 1commands

Перем ЛОГ;
Перем БАЗА;
Перем СЕРВЕР;
Перем ПАРСЕР;
Перем ЗАДАНИЕ;
Перем АДМИНКА;
Перем ФАЙЛ_ДТ;
Перем ТИП_СУБД;
Перем АДМИН_БАЗЫ;
Перем ПАРОЛЬ_БАЗЫ;
Перем СЕРВЕР_ПОРТ;
Перем ВЫГРУЗИТЬ_ДТ;
Перем ЗАГРУЗИТЬ_ДТ;
Перем КОНФИГУРАТОР;
Перем КАТАЛОГ_ЛОГОВ;
Перем КОД_РАЗРЕШЕНИЯ;
Перем ПОЛНОЕ_ИМЯ_ЛОГА;
Перем ПЛАТФОРМА_ВЕРСИЯ;


Процедура Инициализация()
    
    ПАРСЕР = Новый ПарсерАргументовКоманднойСтроки();
    
    ПАРСЕР.ДобавитьПараметр("ИмяКоманды"); // Имя команды
    ПАРСЕР.ДобавитьИменованныйПараметр("/S"); // Сервер
    ПАРСЕР.ДобавитьИменованныйПараметр("/IB"); // Имя ИБ
    ПАРСЕР.ДобавитьИменованныйПараметр("/DBMS"); // Тип СУБД
    ПАРСЕР.ДобавитьИменованныйПараметр("/N"); // Логин админиcтратора ИБ
    ПАРСЕР.ДобавитьИменованныйПараметр("/P"); // Пароль администратора ИБ
    ПАРСЕР.ДобавитьИменованныйПараметр("/UC"); // Код блокировки
    ПАРСЕР.ДобавитьИменованныйПараметр("/PV"); // Версия платформы
    ПАРСЕР.ДобавитьИменованныйПараметр("/DTPath"); // Путь к dt
    ПАРСЕР.ДобавитьИменованныйПараметр("/LogPath"); // Имя логам
    ПАРСЕР.ДобавитьИменованныйПараметр("/Dump"); // Выгрузка ИБ
    ПАРСЕР.ДобавитьИменованныйПараметр("/Restore"); // Загрузка ИБ
    
    Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
    
    СЕРВЕР = Параметры["/S"];
    БАЗА = Параметры["/IB"];
    ТИП_СУБД = Параметры["/DBMS"];
    АДМИН_БАЗЫ = Параметры["/N"];
    ПАРОЛЬ_БАЗЫ = Параметры["/P"];
    КОД_РАЗРЕШЕНИЯ = Параметры["/UC"];
    ПЛАТФОРМА_ВЕРСИЯ = Параметры["/PV"];
    ФАЙЛ_ДТ = Параметры["/DTPath"];
    КАТАЛОГ_ЛОГОВ = Параметры["/LogPath"];
    ВЫГРУЗИТЬ_ДТ = Параметры["/Dump"];
    ЗАГРУЗИТЬ_ДТ = Параметры["/Restore"];
    
        

    Если НЕ ЗначениеЗаполнено(ВЫГРУЗИТЬ_ДТ) Тогда
        ВЫГРУЗИТЬ_ДТ = Ложь;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ТИП_СУБД) Тогда
        ТИП_СУБД = "MSSQLServer";
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ЗАГРУЗИТЬ_ДТ) Тогда
        ЗАГРУЗИТЬ_ДТ = Ложь;
    КонецЕсли;
    
    ЛОГ = Логирование.ПолучитьЛог("dt_copy");
    ЛОГ.УстановитьУровень(УровниЛога.Отладка);
    
    Логv8 = Логирование.ПолучитьЛог("oscript.lib.v8runner");
    Логv8.УстановитьУровень(УровниЛога.Отладка);
    
    Логirac = Логирование.ПолучитьЛог("oscript.lib.irac");
    Логirac.УстановитьУровень(УровниЛога.Отладка);
    
    Логvr = Логирование.ПолучитьЛог("oscript.lib.vanessa-runner");
    Логvr.УстановитьУровень(УровниЛога.Отладка);
    
    ВремяЛога = Строка(Формат(ТекущаяДата(), "ДФ='гггг-ММ-дд_ЧЧ-мм'"));
    ЛОГ.Информация("код_разрешения" + КОД_РАЗРЕШЕНИЯ);
    Если ВЫГРУЗИТЬ_ДТ Тогда
        ЗАДАНИЕ = "dump"
        Иначе
            ЗАДАНИЕ = "restore"
        КонецЕсли;
    
    ПОЛНОЕ_ИМЯ_ЛОГА = КАТАЛОГ_ЛОГОВ + "/dt_copy_" + БАЗА + "_" + ЗАДАНИЕ + "_" + ВремяЛога + ".log";
    
    ФайлЖурнала = Новый ВыводЛогаВФайл();
    ФайлЖурнала.ОткрытьФайл(ПОЛНОЕ_ИМЯ_ЛОГА);
    ЛОГ.ДобавитьСпособВывода(ФайлЖурнала);
    Логv8.ДобавитьСпособВывода(ФайлЖурнала);
    Логirac.ДобавитьСпособВывода(ФайлЖурнала);
    Логvr.ДобавитьСпособВывода(ФайлЖурнала);
    
    ЛогКонсоль = Новый ВыводЛогаВКонсоль();
    ЛОГ.ДобавитьСпособВывода(ЛогКонсоль);
    Логv8.ДобавитьСпособВывода(ЛогКонсоль);
    Логirac.ДобавитьСпособВывода(ЛогКонсоль);
    Логvr.ДобавитьСпособВывода(ЛогКонсоль);
    
    ЛОГ.Отладка("СЕРВЕР = " + СЕРВЕР);
    ЛОГ.Отладка("БАЗА = " + БАЗА);
    
    АДМИНКА = Новый УправлениеКластером1С(ПЛАТФОРМА_ВЕРСИЯ, СЕРВЕР);
    
    
    ЛОГ.Информация("СтрокаСоединенияИБ " + СтрокаСоединенияИБ());
    
    КОНФИГУРАТОР = Новый УправлениеКОНФИГУРАТОРом();
    КОНФИГУРАТОР.УстановитьКонтекст(СтрокаСоединенияИБ(), АДМИН_БАЗЫ, ПАРОЛЬ_БАЗЫ);
    КОНФИГУРАТОР.ИспользоватьВерсиюПлатформы(ПЛАТФОРМА_ВЕРСИЯ);
    
    Если ЗначениеЗаполнено(КОД_РАЗРЕШЕНИЯ) Тогда
        КОНФИГУРАТОР.УстановитьКлючРазрешенияЗапуска(КОД_РАЗРЕШЕНИЯ);
    КонецЕсли;
    
КонецПроцедуры

Процедура НайтиБазуПоИмени()
    
    Кластеры = АДМИНКА.Кластеры();
    БазаНайдена = Ложь;
    Для Каждого Кластер Из Кластеры.Список() Цикл
        ЛОГ.Информация("Имя кластера = " + Кластер.Получить("Имя"));
        ИБКластера = Кластер.ИнформационныеБазы();
        
        Отбор = Новый Соответствие();
        Отбор.Вставить("name", БАЗА);
        
        ЛОГ.Информация("Поиск базы %1 ", БАЗА);
        СписокБаз = ИБКластера.Список(Отбор, Истина);
        Для Каждого ТекИБ Из СписокБаз Цикл
            БазаНайдена = Истина;
            ИмяБазы = ТекИБ.Имя();
            
            ЛОГ.Информация("База найдена!");
            
        КонецЦикла;
    КонецЦикла;
    
    Если НЕ БазаНайдена Тогда
        ВызватьИсключение СтрШаблон("На сервере: %1 ИБ %2 НЕ НАЙДЕНА!", СЕРВЕР, БАЗА);
    КонецЕсли;
    
КонецПроцедуры

Процедура ИзменитьСвойстваБаз()
    
    Кластеры = АДМИНКА.Кластеры();
    Для Каждого Кластер Из Кластеры.Список() Цикл
        ЛОГ.Информация("Имя кластера = " + Кластер.Получить("Имя"));
        ИБКластера = Кластер.ИнформационныеБазы();
        
        СписокБаз = ИБКластера.Список( , Истина);
        ЛОГ.Информация("Поиск базы '%1'", БАЗА);
        
        Для Каждого ТекИБ Из СписокБаз Цикл
            Если ВРег(ТекИБ.Имя()) = ВРег(БАЗА) Тогда
                
                ЛОГ.Информация("Обрабатываем базу %1", ТекИБ.Имя());
                
                //ИзменитьСвойстваБазы(ТекИБ);
                
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
КонецПроцедуры

Процедура ИзменитьСвойстваБазы(ТекИБ)
    
    НовыеПараметрыИБ = Новый Структура;
    НовыеПараметрыИБ.Вставить("ПрофильБезопасностиБезопасногоРежима", "");
    ТекДатаВремя = ТекущаяДата();
    
    // НовыеПараметрыИБ.Вставить("НачалоБлокировкиСеансов", Формат(ТекДатаВремя, "ДФ='yyyy-MM-ddTHH:mm:ss'"));
    // НовыеПараметрыИБ.Вставить("ОкончаниеБлокировкиСеансов", Формат(ТекДатаВремя + 7200, "ДФ='yyyy-MM-ddTHH:mm:ss'"));
    
    Если ЗначениеЗаполнено(ТИП_СУБД) Тогда
        НовыеПараметрыИБ.Вставить("ТипСУБД", ТИП_СУБД);
    КонецЕсли;
    
    ЛОГ.Информация("Блокировка регламентных заданий ...");
    
    НовыеПараметрыИБ.Вставить("КодРазрешения", КОД_РАЗРЕШЕНИЯ);
    
    ТекИБ.УстановитьАдминистратора(АДМИН_БАЗЫ, ПАРОЛЬ_БАЗЫ);
    ТекИБ.Изменить(НовыеПараметрыИБ);
    
КонецПроцедуры

Процедура ЗаблокироватьРегламентыеЗадания()
    
    СтрокаЗапуска = "runner scheduledjobs lock  --db " + БАЗА +
        " --ibconnection /S" + СЕРВЕР + "/" + БАЗА +
        " --db-user " + АДМИН_БАЗЫ +
        " --db-pwd " + ПАРОЛЬ_БАЗЫ +
        " --ras " + СЕРВЕР +
        " --v8version " + ПЛАТФОРМА_ВЕРСИЯ;
    
    КодВозврата = Неопределено;
    ОжидатьЗавершения = Истина;
    
    ЗапуститьПриложение(СтрокаЗапуска, , ОжидатьЗавершения, КодВозврата);
    Если (КодВозврата <> 0) Тогда
        ВызватьИсключение("ВНИМАНИЕ! Ошибка при блокировке регламентных заданий!");
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗакрытьВсеСеансыСблокировкойВхода()
    
    СтрокаЗапуска = "runner session kill --uccode " + КОД_РАЗРЕШЕНИЯ +
        " --db " + БАЗА +
        " --ibconnection /S" + СЕРВЕР + "/" + БАЗА +
        " --db-user " + АДМИН_БАЗЫ +
        " --db-pwd " + ПАРОЛЬ_БАЗЫ +
        " --v8version " + ПЛАТФОРМА_ВЕРСИЯ +
        " --ras " + СЕРВЕР +
        " --try 5 ";
    
    НомерПопытки = 1;
    КоличествоПопыток = 35;
    СеансыЗаблокированы = Ложь;
    
    Пока НЕ СеансыЗаблокированы И НомерПопытки <= КоличествоПопыток Цикл
        
        Если ПроверитАктивныеСеансы() <> 0 Тогда
            ЛОГ.Информация("Попытка завершить сеансы номер %1", НомерПопытки);
            
            КодВозврата = Неопределено;
            ОжидатьЗавершения = Истина;
            
            ЗапуститьПриложение(СтрокаЗапуска, , ОжидатьЗавершения, КодВозврата);
            Если (КодВозврата <> 0) Тогда
                ВызватьИсключение("ВНИМАНИЕ! Ошибка при блокировке сеансов!");
            КонецЕсли;
            
            ЛОГ.Информация("Пауза 30 секунд");
            Пауза = 30000;
            Приостановить(Пауза);
            
            НомерПопытки = НомерПопытки + 1;
        Иначе
            СеансыЗаблокированы = Истина;
        КонецЕсли
        
    КонецЦикла;
    
    Если СеансыЗаблокированы Тогда
        ЛОГ.Информация("Все сеансы успешно завершены!");
    Иначе
        ЛОГ.Информация("ВНИМАНИЕ! Сеансы не удалось завершить! 
            |Будет попытка выполнить выгрузку базы, что бы увидеть какие сеансы 'зависли'!");
    КонецЕсли;
    
КонецПроцедуры


Процедура РазблокироватьБазу()
    
    СтрокаЗапуска = "runner session unlock --uccode " + КОД_РАЗРЕШЕНИЯ +
        " --db " + БАЗА +
        " --ibconnection /S" + СЕРВЕР + "/" + БАЗА +
        " --db-user " + АДМИН_БАЗЫ +
        " --db-pwd " + ПАРОЛЬ_БАЗЫ +
        " --v8version " + ПЛАТФОРМА_ВЕРСИЯ +
        " --ras " + СЕРВЕР +
        " --try 5 ";
    
    КодВозврата = Неопределено;
    ОжидатьЗавершения = Истина;
    
    ЗапуститьПриложение(СтрокаЗапуска, , ОжидатьЗавершения, КодВозврата);
    Если (КодВозврата <> 0) Тогда
        ВызватьИсключение("ВНИМАНИЕ! Ошибка при разблокировке базы!");
    КонецЕсли;
    
КонецПроцедуры

Функция ПроверитАктивныеСеансы()
    СтрокаЗапуска = "runner session closed --uccode " + КОД_РАЗРЕШЕНИЯ +
        " --db " + БАЗА +
        " --ibconnection /S" + СЕРВЕР + "/" + БАЗА +
        " --db-user " + АДМИН_БАЗЫ +
        " --db-pwd " + ПАРОЛЬ_БАЗЫ +
        " --v8version " + ПЛАТФОРМА_ВЕРСИЯ +
        " --ras " + СЕРВЕР +
        " --try 5 ";
    
    КодВозврата = Неопределено;
    ОжидатьЗавершения = Истина;
    
    ЗапуститьПриложение(СтрокаЗапуска, , ОжидатьЗавершения, КодВозврата);
    Если (КодВозврата <> 0) Тогда
        ЛОГ.Информация("ВНИМАНИЕ! Есть активные сеансы!");
    КонецЕсли;
    
    Возврат КодВозврата;
КонецФункции

Процедура ВыгрузитьИБ()
    
    ВремяНачала = Строка(Формат(ТекущаяДата(), "ДФ='гггг-ММ-дд_ЧЧ-мм'"));
    
    ЛОГ.Информация("Начинаю выгрузку базы в " + ФАЙЛ_ДТ);
    ЛОГ.Информация("Начало выгрузки " + ВремяНачала);
    
    КОНФИГУРАТОР.ВыгрузитьИнформационнуюБазу(ФАЙЛ_ДТ);
    
    ВремяОкончания = Строка(Формат(ТекущаяДата(), "ДФ='гггг-ММ-дд_ЧЧ-мм'"));
    
    ЛОГ.Информация("Выгрузка завершена в " + ФАЙЛ_ДТ);
    ЛОГ.Информация("Окончание выгрузки " + ВремяОкончания);
    
КонецПроцедуры

Процедура ЗагрузитьИБ()
    
    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
    ПараметрыЗапуска.Добавить("/RestoreIB " + ФАЙЛ_ДТ);
    
    ВремяНачала = Строка(Формат(ТекущаяДата(), "ДФ='гггг-ММ-дд_ЧЧ-мм'"));
    
    ЛОГ.Информация("Начинаю загрузу базы из " + ФАЙЛ_ДТ);
    ЛОГ.Информация("Начало взагрузки " + ВремяНачала);
    
    НомерПопытки = 1;
    КоличествоПопыток = 5;
    БазаЗагружена = Ложь;
    
    Пока НЕ БазаЗагружена И НомерПопытки <= КоличествоПопыток Цикл
        
        Попытка
            Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
            ВремяОкончания = Строка(Формат(ТекущаяДата(), "ДФ='гггг-ММ-дд_ЧЧ-мм'"));
            
            ЛОГ.Информация("Загрузка базы завершена!");
            ЛОГ.Информация("Окончание загрузки " + ВремяОкончания);
            
            БазаЗагружена = Истина;
            
        Исключение
            
            НомерПопытки = НомерПопытки + 1;
            ЛОГ.Информация("Ошибка загрузки базы:" + Конфигуратор.ВыводКоманды());
            ЛОГ.Информация("Попытка №:" + НомерПопытки); 
            ЛОГ.Информация("Пауза 30 секунд");
            Пауза = 30000;
            Приостановить(Пауза);
            
        КонецПопытки;
        
    КонецЦикла;
    
КонецПроцедуры


Функция СтрокаСоединенияИБ()
    Возврат "/IBConnectionString""Srvr=" +
    СЕРВЕР + ?(ЗначениеЗаполнено(СЕРВЕР_ПОРТ), ":" + СЕРВЕР_ПОРТ, "") + ";Ref='" + БАЗА + "'""";
КонецФункции


Сообщить("Инициализация...");
Инициализация();
НайтиБазуПоИмени();
ИзменитьСвойстваБаз();

//ЗаблокироватьРегламентыеЗадания();
//ЗакрытьВсеСеансыСблокировкойВхода();

ЛОГ.Информация("ВЫГРУЗИТЬ  " + ВЫГРУЗИТЬ_ДТ);
ЛОГ.Информация("ЗАГРУЗИТЬ  " + ЗАГРУЗИТЬ_ДТ);

Если ВЫГРУЗИТЬ_ДТ Тогда
    ВыгрузитьИБ();
КонецЕсли;

Если ЗАГРУЗИТЬ_ДТ Тогда
    ЗагрузитьИБ();
КонецЕсли;

//РазблокироватьБазу();
//ЗаблокироватьРегламентыеЗадания();

ЛОГ.Информация("Сценарий завершился!");
